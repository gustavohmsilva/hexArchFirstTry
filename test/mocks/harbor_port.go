// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/harbor.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/gustavohmsilva/ports/internal/core/domain"
)

// MockHarborRepositoryIface is a mock of HarborRepositoryIface interface.
type MockHarborRepositoryIface struct {
	ctrl     *gomock.Controller
	recorder *MockHarborRepositoryIfaceMockRecorder
}

// MockHarborRepositoryIfaceMockRecorder is the mock recorder for MockHarborRepositoryIface.
type MockHarborRepositoryIfaceMockRecorder struct {
	mock *MockHarborRepositoryIface
}

// NewMockHarborRepositoryIface creates a new mock instance.
func NewMockHarborRepositoryIface(ctrl *gomock.Controller) *MockHarborRepositoryIface {
	mock := &MockHarborRepositoryIface{ctrl: ctrl}
	mock.recorder = &MockHarborRepositoryIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHarborRepositoryIface) EXPECT() *MockHarborRepositoryIfaceMockRecorder {
	return m.recorder
}

// CreateHarbor mocks base method.
func (m *MockHarborRepositoryIface) CreateHarbor(harbor domain.Harbor) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHarbor", harbor)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHarbor indicates an expected call of CreateHarbor.
func (mr *MockHarborRepositoryIfaceMockRecorder) CreateHarbor(harbor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHarbor", reflect.TypeOf((*MockHarborRepositoryIface)(nil).CreateHarbor), harbor)
}

// UpdateHarbor mocks base method.
func (m *MockHarborRepositoryIface) UpdateHarbor(harbor domain.Harbor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHarbor", harbor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHarbor indicates an expected call of UpdateHarbor.
func (mr *MockHarborRepositoryIfaceMockRecorder) UpdateHarbor(harbor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHarbor", reflect.TypeOf((*MockHarborRepositoryIface)(nil).UpdateHarbor), harbor)
}

// MockHarborServiceIface is a mock of HarborServiceIface interface.
type MockHarborServiceIface struct {
	ctrl     *gomock.Controller
	recorder *MockHarborServiceIfaceMockRecorder
}

// MockHarborServiceIfaceMockRecorder is the mock recorder for MockHarborServiceIface.
type MockHarborServiceIfaceMockRecorder struct {
	mock *MockHarborServiceIface
}

// NewMockHarborServiceIface creates a new mock instance.
func NewMockHarborServiceIface(ctrl *gomock.Controller) *MockHarborServiceIface {
	mock := &MockHarborServiceIface{ctrl: ctrl}
	mock.recorder = &MockHarborServiceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHarborServiceIface) EXPECT() *MockHarborServiceIfaceMockRecorder {
	return m.recorder
}

// CreateHarbor mocks base method.
func (m *MockHarborServiceIface) CreateHarbor(harbor domain.Harbor) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHarbor", harbor)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHarbor indicates an expected call of CreateHarbor.
func (mr *MockHarborServiceIfaceMockRecorder) CreateHarbor(harbor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHarbor", reflect.TypeOf((*MockHarborServiceIface)(nil).CreateHarbor), harbor)
}

// UpdateHarbor mocks base method.
func (m *MockHarborServiceIface) UpdateHarbor(harbor domain.Harbor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHarbor", harbor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHarbor indicates an expected call of UpdateHarbor.
func (mr *MockHarborServiceIfaceMockRecorder) UpdateHarbor(harbor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHarbor", reflect.TypeOf((*MockHarborServiceIface)(nil).UpdateHarbor), harbor)
}

// MockHarborHandlerIface is a mock of HarborHandlerIface interface.
type MockHarborHandlerIface struct {
	ctrl     *gomock.Controller
	recorder *MockHarborHandlerIfaceMockRecorder
}

// MockHarborHandlerIfaceMockRecorder is the mock recorder for MockHarborHandlerIface.
type MockHarborHandlerIfaceMockRecorder struct {
	mock *MockHarborHandlerIface
}

// NewMockHarborHandlerIface creates a new mock instance.
func NewMockHarborHandlerIface(ctrl *gomock.Controller) *MockHarborHandlerIface {
	mock := &MockHarborHandlerIface{ctrl: ctrl}
	mock.recorder = &MockHarborHandlerIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHarborHandlerIface) EXPECT() *MockHarborHandlerIfaceMockRecorder {
	return m.recorder
}

// CreateHarbor mocks base method.
func (m *MockHarborHandlerIface) CreateHarbor(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateHarbor", w, r)
}

// CreateHarbor indicates an expected call of CreateHarbor.
func (mr *MockHarborHandlerIfaceMockRecorder) CreateHarbor(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHarbor", reflect.TypeOf((*MockHarborHandlerIface)(nil).CreateHarbor), w, r)
}

// UpdateHarbor mocks base method.
func (m *MockHarborHandlerIface) UpdateHarbor(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateHarbor", w, r)
}

// UpdateHarbor indicates an expected call of UpdateHarbor.
func (mr *MockHarborHandlerIfaceMockRecorder) UpdateHarbor(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHarbor", reflect.TypeOf((*MockHarborHandlerIface)(nil).UpdateHarbor), w, r)
}
